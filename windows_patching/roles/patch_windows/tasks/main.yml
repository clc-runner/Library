---
- name: Perform Definition Updates
  win_updates:
    category_names: "DefinitionUpdates"
    log_path: c:/definition_updates.txt
  register: definintion
  when: definitionUpdates == "true"

- name: Apply Critical updates
  win_updates:
    category_names: "CriticalUpdates"
    log_path: c:/critical_updates.txt
  register: criticals
  when: critical == "true"

- name: Stop server if reboot is required
  connection: local
  clc_server:
    server_ids: "{{ item }}"
    state: stopped
  with_items: groups.all
  when: "criticals.reboot_required is defined and criticals.reboot_required"

- name: Start server if reboot is required
  connection: local
  clc_server:
    server_ids: "{{ item }}"
    state: started
  with_items: groups.all
  when: "criticals.reboot_required is defined and criticals.reboot_required"

- name: Apply Security Updates
  win_updates:
    category_names: "SecurityUpdates"
    log_path: c:/security_updates.txt
  register: security
  when: security == "true"

- name: Stop server if reboot is required
  connection: local
  clc_server:
    server_ids: "{{ item }}"
    state: stopped
  with_items: groups.all
  when: "security.reboot_required is defined and security.reboot_required"

- name: Start server if reboot is required
  connection: local
  clc_server:
    server_ids: "{{ item }}"
    state: started
  with_items: groups.all
  when: "security.reboot_required is defined and security.reboot_required"

- name: Install Service Packs
  win_updates:
    category_names: "ServicePacks"
    log_path: c:/service_packs.txt
  register: sp
  when: servicePacks == "true"

- name: Stop server if reboot is required
  connection: local
  clc_server:
    server_ids: "{{ item }}"
    state: stopped
  with_items: groups.all
  when: "sp.reboot_required is defined and sp.reboot_required"

- name: Start server if reboot is required
  connection: local
  clc_server:
    server_ids: "{{ item }}"
    state: started
  with_items: groups.all
  when: "sp.reboot_required is defined and sp.reboot_required"

- name: Apply General Updates
  win_updates:
    category_names: "Updates"
    log_path: c:/general_updates.txt
  register: general
  when: updates == "true"

- name: Apply Update Rollups
  win_updates:
    category_names: "UpdateRollups"
    log_path: c:/update_rollups.txt
  register: rollups
  when: updateRollups == "true"

- name: Install Feature Packs
  win_updates:
    category_names: "FeaturePacks"
    log_path: c:/feature_packs.txt
  register: features
  when: featurePacks == "true"

- name: Apply Application Updates
  win_updates:
    category_names: "Application"
    log_path: c:/application_updates.txt
  register: application_boot
  when: application == "true"

- name: Update Connectors
  win_updates:
    category_names: "Connectors"
    log_path: c:/connector_updates.txt
  register: connectors_boot
  when: connectors == "true"

- name: Update Developer Kits
  win_updates:
    category_names: "DeveloperKits"
    log_path: c:/developer_kits.txt
  register: developer
  when: developerKits == "true"

- name: Update Microsoft Tools
  win_updates:
    category_names: "Tools"
    log_path: c:/tools_updates.txt
  register: tools_boot
  when: tools == "true"

- name: Update Guidance Libraries
  win_updates:
    category_names: "Guidance"
    log_path: c:/guidance_updates.txt
  register: guidance_boot
  when: guidance == "true"
